from django.db import models
from colorfield.fields import ColorField
from django.urls import reverse
from ckeditor.fields import RichTextField

from main_page.utils import unique_slugify


class City(models.Model):
    title = models.CharField(max_length=100, blank=False, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω–∞')
    slug = models.CharField(max_length=100, blank=True, unique=True, verbose_name='–°—Å—ã–ª–∫–∞')
    image = models.ImageField(upload_to='images/%Y/%M/%D', blank=True, verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞')
    content = RichTextField(blank=True, null=True, verbose_name='–¢–µ–∫—Å—Ç', config_name='extends')

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = unique_slugify(self, self.title)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('city', kwargs={'city_slug': self.slug})

    class Meta:
        verbose_name = '–ì–æ—Ä–æ–¥'
        verbose_name_plural = '–ì–æ—Ä–æ–¥–∞'
        ordering = ['title']


class Line(models.Model):
    title = models.CharField(max_length=100, blank=False, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–π')
    slug = models.CharField(max_length=100, blank=True, unique=True, verbose_name='–°—Å—ã–ª–∫–∞')
    content = RichTextField(blank=True, null=True, verbose_name='–¢–µ–∫—Å—Ç', config_name='extends')
    number = models.CharField(max_length=3, blank=True, verbose_name='–ù–æ–º–µ—Ä –ª–∏–Ω–∏–π')
    color_text = ColorField(default='#FFFFFF', verbose_name='–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞')
    color = ColorField(default='#EF161E', verbose_name='–¶–≤–µ—Ç')
    city = models.ForeignKey(City, on_delete=models.PROTECT, verbose_name='–ì–æ—Ä–æ–¥')
    image = models.ImageField(upload_to='images/%Y/%M/%D', blank=True, verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞')

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('line', kwargs={'line_slug': self.slug})

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = unique_slugify(self, self.title)
        super().save(*args, **kwargs)

    class Meta:
        verbose_name = '–õ–∏–Ω–∏—è'
        verbose_name_plural = '–õ–∏–Ω–∏–∏'
        ordering = ['number', 'title']


class Station(models.Model):
    STATUS_TYPE = (
        ('–≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è', 'üöá –≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è'),
        ('–°—Ç—Ä–æ–∏—Ç—Å—è', 'üõ†Ô∏è –°—Ç—Ä–æ–∏—Ç—Å—è'),
        ('–ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è', '‚úè –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è'),
        ('–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è', 'üìÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è'),
        ('–ó–∞–∫—Ä—ã—Ç–∞', 'üîí –ó–∞–∫—Ä—ã—Ç–∞'),
    )

    PATH_TYPE = (
        ('–≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è', 'üöá –≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è'),
        ('–°—Ç—Ä–æ–∏—Ç—Å—è', 'üõ†Ô∏è –°—Ç—Ä–æ–∏—Ç—Å—è'),
        ('–ù–∏—á–µ–≥–æ', '–ù–∏—á–µ–≥–æ'),
    )

    PATH_DIRECTION = (
        ('–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å', '–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å'),
        ('–û—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏–µ', '–û—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏–µ'),
        ('–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏—è', '–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏—è'),
        ('–ö–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏—è', '–ö–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏—è'),
    )

    title = models.CharField(max_length=100, blank=False, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π')
    slug = models.CharField(max_length=100, blank=True, unique=True, verbose_name='–°—Å—ã–ª–∫–∞')
    content = RichTextField(blank=True, null=True, verbose_name='–¢–µ–∫—Å—Ç', config_name='extends')
    index = models.IntegerField(default=1, verbose_name='–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–π (—Å–µ–≤–µ—Ä-—é–≥/–≤–æ—Å—Ç–æ–∫-–∑–∞–ø–∞–¥)')
    transfer = models.ManyToManyField('Station', blank=True, related_name='+', verbose_name='–ü–µ—Ä–µ—Å–∞–¥–∫–∏',
                                      help_text='–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–∞–¥–æ–∫, –≤–∞–º –Ω—É–∂–Ω–æ –µ—â—ë —Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏—é')
    path_direction = models.CharField(max_length=200, choices=PATH_DIRECTION,
                                      default='–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å', verbose_name='–¢–∏–ø –ø—É—Ç–∏')
    prev_path = models.CharField(max_length=200, choices=PATH_TYPE,
                                 default='–≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è', verbose_name='–ü—É—Ç—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–π')
    status = models.CharField(max_length=200, choices=STATUS_TYPE, default='–≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è', verbose_name='–°—Ç–∞—Ç—É—Å')
    next_path = models.CharField(max_length=200, choices=PATH_TYPE,
                                 default='–≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è', verbose_name='–ü—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–π')
    line = models.ForeignKey(Line, on_delete=models.PROTECT, verbose_name='–õ–∏–Ω–∏—è')
    image = models.ImageField(upload_to='images/%Y/%M/%D', blank=True, verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞')

    def __str__(self):
        return f'{self.title} - {self.line.title}'

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = unique_slugify(self, self.title)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('station', kwargs={'station_slug': self.slug})

    class Meta:
        verbose_name = '–°—Ç–∞–Ω—Ü–∏—è'
        verbose_name_plural = '–°—Ç–∞–Ω—Ü–∏–π'
        ordering = ['line', 'index', 'title']


class Train(models.Model):
    title = models.CharField(max_length=100, blank=False, verbose_name='–ú–æ–¥–µ–ª—å –º–µ—Ç—Ä–æ–≤–∞–≥–æ–Ω–∞')
    slug = models.CharField(max_length=100, blank=True, unique=True, verbose_name='–°—Å—ã–ª–∫–∞')
    image = models.ImageField(upload_to='images/%Y/%M/%D', blank=True, verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞')
    content = RichTextField(blank=True, null=True, verbose_name='–¢–µ–∫—Å—Ç', config_name='extends')

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = unique_slugify(self, self.title)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('train', kwargs={'train_slug': self.slug})

    class Meta:
        verbose_name = '–ú–µ—Ç—Ä–æ–≤–∞–≥–æ–Ω'
        verbose_name_plural = '–ú–µ—Ç—Ä–æ–≤–∞–≥–æ–Ω—ã'
        ordering = ['title']


class Depot(models.Model):
    STATUS_TYPE = (
        ('–≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è', 'üöá –≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è'),
        ('–°—Ç—Ä–æ–∏—Ç—Å—è', 'üõ†Ô∏è –°—Ç—Ä–æ–∏—Ç—Å—è'),
        ('–ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è', '‚úè –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è'),
        ('–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è', 'üìÑ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è'),
        ('–ó–∞–∫—Ä—ã—Ç–∞', 'üîí –ó–∞–∫—Ä—ã—Ç–∞'),
    )

    number_of_depot = models.IntegerField(default=1, verbose_name='–ù–æ–º–µ—Ä –¥–µ–ø–æ')
    title = models.CharField(max_length=100, blank=False, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ø–æ')
    slug = models.CharField(max_length=100, blank=True, unique=True, verbose_name='–°—Å—ã–ª–∫–∞')
    image = models.ImageField(upload_to='images/%Y/%M/%D', blank=True, verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞')
    content = RichTextField(blank=True, null=True, verbose_name='–¢–µ–∫—Å—Ç', config_name='extends')
    status = models.CharField(max_length=200, choices=STATUS_TYPE, default='–≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ—Ç—Å—è', verbose_name='–°—Ç–∞—Ç—É—Å')
    index = models.IntegerField(default=0, verbose_name='–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–π –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è',
                                help_text='–£–∫–∞–∂–∏—Ç–µ 0, —á—Ç–æ–±—ã –¥–µ–ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å —Å–≤–µ—Ä—Ö—É')
    city = models.ForeignKey(City, on_delete=models.PROTECT, verbose_name='–ì–æ—Ä–æ–¥')
    main_line = models.ForeignKey(Line, on_delete=models.CASCADE, null=True,
                                  verbose_name='–õ–∏–Ω–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞')
    lines = models.ManyToManyField(Line, blank=True, related_name='+', verbose_name='–î—Ä—É–≥–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã–µ –ª–∏–Ω–∏–∏')
    trains = models.ManyToManyField(Train, blank=True, related_name='+', verbose_name='–ü–æ–µ–∑–¥–∞')

    def __str__(self):
        return f'–¢–ß-{self.number_of_depot} {self.title}'

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = unique_slugify(self, self.title)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('depot', kwargs={'depot_slug': self.slug})

    class Meta:
        verbose_name = '–î–µ–ø–æ'
        verbose_name_plural = '–î–µ–ø–æ'
        ordering = ['city', 'number_of_depot']
